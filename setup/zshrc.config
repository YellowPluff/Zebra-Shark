# Required so UNIX knows where to find commonly used commands
path+=('/usr/local/bin' '/usr/bin' '/bin' '/usr/sbin' '.') # Working directory last for security
export PATH

# This sets the default permissions on new files / directories
# Files are RW-RW-R--
# Directories are RWXRWXR-X
umask 002

installPath="$HOME/Zebra-Shark"

# This sets all the color variables available for use
source $installPath/scripts/colors.zsh

# Check for updates and prompt user to update if an update exists
isUpdateAvailable=$(cd $installPath; git remote update &> /dev/null; git status -uno)
if [[ $isUpdateAvailable == *"branch is behind"* ]];
then
    echo "Zebra Shark update available"
    echo "Run $Green update_zebra_shark $Color_Off to install update"
fi

# Hooking a function is a feature of ZSH that attaches a custom function to
# an existing hookable function. When the hookable function is executed so is the custom
# function that was hooked to it.

# While you can modify hookable functions directly, it's cleaner to seperate logic into
# custom specific functions then add the custom function as a hook to the hookable function.

# For more information, including the full list of hookable functions, see
# https://stephencharlesweiss.com/zsh-hooks

# Also, autoload tells ZSH to look for a file in $FPATH/$fpath containing a function definition,
# instead of a file in $PATH/$path containing an executable script or binary.
# -U flag, alias expansion is suppressed when the function is loaded.
# -z flag, mark the function to be autoloaded using the zsh style.
autoload -Uz add-zsh-hook

# Enable the alias tip feature
source $installPath/scripts/alias_tip.zsh

# Enable the right prompt previous command run time
source $installPath/scripts/command_run_time.zsh

# Enable the dynamic terminal title
source $installPath/scripts/terminal_title.zsh

# Enable the in-line calculator.
source $installPath/scripts/in_line_calc.zsh

# Set the user defined prompt
source $installPath/prompt.zsh

# Retrieve git information for prompt
# Source one of these depending on which you want.
# async_git.zsh will provide a lot more information, but slower to load. (Happens in the background)
# git.zsh will provide only the vital information, but is near real time.
source $installPath/scripts/async_git.zsh
# source $installPath/scripts/git.zsh

# Setup the history file
source $installPath/scripts/history_file_settings.zsh

# Enable quick directory navigation using the 'd' command.
source $installPath/scripts/d_command.zsh

# Bind the delete key to delete rather than input char
bindkey "^[[3~" delete-char

# Initialize the ZSH builtin completion system.
autoload -Uz compinit

# Setup the ZSH completion system
source $installPath/scripts/zsh_completion.zsh

# Aliases are parsed before functions, so if you have alias foo and function foo then
# foo would return the alias. This is important when trying to overload an alias or
# when you have an alias and function of the same name.

# Source custom defined functions
source $installPath/scripts/default_functions.zsh

# Source user defined aliases
source $installPath/aliases.zsh

# Source user defined functions
source $installPath/functions.zsh

# Enable automatic sourcing of prompt / aliases / functions files
source $installPath/scripts/auto_sourcer.zsh